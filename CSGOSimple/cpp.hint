// Файлы указаний помогают среде IDE Visual Studio интерпретировать идентификаторы Visual C++
// (например, имена функций и макросов).
// Дополнительные сведения: https://go.microsoft.com/fwlink/?linkid=865984
#define FOR_EACH_SUBKEY(kvRoot, kvSubKey) for ( SourceEngine::KeyValues* kvSubKey = kvRoot->GetFirstSubKey(); kvSubKey; kvSubKey = kvSubKey->GetNextKey() )
#define make_field(_name_, _id_, _type_) constexpr static Tag _name_ = { _id_, _type_ }; void clear_##_name_() { this->clear(_name_); } bool has_##_name_() { return this->has(_name_); } Field get_##_name_() { return this->get(_name_); } std::vector<Field> getAll_##_name_() { return this->getAll(_name_); } void add_##_name_(std::string v) { this->add(_name_, v); } template<typename T> void add_##_name_(T v) { this->add(_name_, v); } void replace_##_name_(std::string v) { this->replace(_name_, v); } void replace_##_name_(std::string v, uint32_t index) { this->replace(_name_, v, index); } template<typename T> void replace_##_name_(T v) { this->replace(_name_, v); } template<typename T> void replace_##_name_(T v, uint32_t index) { this->replace(_name_, v, index); } template<class T> T get_##_name_() { return std::move( T(this->get(_name_).String()) ); }
